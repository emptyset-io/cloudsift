name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major/minor/patch)'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: 'patch'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: make deps

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          RELEASE_TYPE: ${{ github.event.inputs.release_type }}
        run: make release

      - name: Get Version
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1)
          echo "previous_tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          
          # Generate real changelog with links to commits and PRs
          echo "Generating changelog with links..."
          
          # Create changelog with links to commits and PRs
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Get the changelog entries with commit links and ensure newlines
          rm -f changelog.txt
          
          # Process each commit to look for PR references and add appropriate links
          git log --pretty=format:"%h %s (%an)" ${PREVIOUS_TAG}..HEAD | while read -r line; do
            COMMIT_HASH=$(echo "$line" | awk '{print $1}')
            REST_OF_LINE=$(echo "$line" | cut -d' ' -f2-)
            
            # Check if commit message contains PR reference (#123)
            if [[ "$REST_OF_LINE" =~ \(#([0-9]+)\) ]]; then
              # Extract PR number
              PR_NUMBER="${BASH_REMATCH[1]}"
              # Replace PR reference with link at the end
              MODIFIED_LINE=$(echo "$REST_OF_LINE" | sed "s|(#${PR_NUMBER})||")
              echo "• <${REPO_URL}/commit/${COMMIT_HASH}|${COMMIT_HASH}> ${MODIFIED_LINE} (<${REPO_URL}/pull/${PR_NUMBER}|#${PR_NUMBER}>)" >> changelog.txt
            else
              # No PR reference, just add commit link at the beginning
              echo "• <${REPO_URL}/commit/${COMMIT_HASH}|${COMMIT_HASH}> ${REST_OF_LINE}" >> changelog.txt
            fi
            
            # Add empty line after each entry
            echo "" >> changelog.txt
          done
          
          echo "Changelog content:"
          cat changelog.txt

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            emptyset/cloudsift:latest
            emptyset/cloudsift:${{ steps.get_version.outputs.version }}

      - name: Create Slack Payload and Send
        id: slack
        run: |
          # Format the changelog with proper newlines for Slack
          CHANGELOG=""
          while IFS= read -r line; do
            # Skip empty lines at the end
            if [[ -n "$line" ]]; then
              CHANGELOG="${CHANGELOG}${line}\n"
            fi
          done < changelog.txt
          
          # Create payload with changelog that includes links
          cat > payload.json << EOF
          {
            "text": "CloudSift ${{ steps.get_version.outputs.version }} has been released!",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "🚀 New Release: ${{ steps.get_version.outputs.version }}",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*CloudSift ${{ steps.get_version.outputs.version }} has been released!*\n\nRelease type: \`${{ github.event.inputs.release_type }}\`"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "📦 Docker images published:\n• \`emptyset/cloudsift:latest\`\n• \`emptyset/cloudsift:${{ steps.get_version.outputs.version }}\`"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "📝 *Changes since ${{ steps.changelog.outputs.previous_tag }}:*\n${CHANGELOG}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Release",
                      "emoji": true
                    },
                    "url": "https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_version.outputs.version }}"
                  }
                ]
              }
            ]
          }
          EOF
          
          echo "Generated payload:"
          cat payload.json
          
          # Send using curl
          RESPONSE=$(curl -s -X POST -H "Content-type: application/json" -d @payload.json ${{ secrets.SLACK_WEBHOOK_URL }})
          echo "Slack API response: $RESPONSE"
          
      - name: Output Slack result
        if: always()
        run: echo "Slack API response completed"
